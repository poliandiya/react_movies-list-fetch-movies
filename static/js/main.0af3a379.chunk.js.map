{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","imgUrl","alt","title","plot","MoviesList","movies","map","imdbId","loadMovie","a","fetch","response","json","FindMovie","onAdd","useState","setMovie","query","setQuery","error","setError","findMovie","newMovie","Response","Title","Plot","Poster","imdbUrl","imdbID","htmlFor","type","id","placeholder","value","onChange","event","target","onClick","disabled","App","state","addMovie","find","film","setState","currentState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0af3a379.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbId}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const API_URL = 'https://www.omdbapi.com/?apikey=9faefc57';\n\nexport const loadMovie = async (title: string) => {\n  const response = await fetch(`${API_URL}&t=${title}`);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport { loadMovie } from '../../api/api';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAdd }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(false);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setError(false);\n  };\n\n  const findMovie = async () => {\n    const newMovie: NewMovie = await loadMovie(query);\n\n    if (newMovie.Response === 'False') {\n      setError(true);\n      setMovie(null);\n\n      return;\n    }\n\n    setError(false);\n\n    setMovie({\n      title: newMovie.Title,\n      plot: newMovie.Plot,\n      imgUrl: newMovie.Poster,\n      imdbUrl: `https://www.imdb.com/title/${newMovie.imdbID}/`,\n      imdbId: newMovie.imdbID,\n    });\n\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-danger\"\n              value={query}\n              onChange={handleChange}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              disabled={!movie}\n              onClick={() => {\n                onAdd(movie as Movie);\n                setMovie(null);\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {movie && <MovieCard movie={movie} />}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: [],\n  };\n\n  addMovie = (movie: Movie) => {\n    if (!this.state.movies\n      .find(film => film.imdbId === movie.imdbId)) {\n      this.setState((currentState) => ({\n        movies: [...currentState.movies, movie],\n      }));\n    }\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <FindMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}